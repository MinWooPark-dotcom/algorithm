{"/Algorithm/2022-05-10-%5B%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%5D%20%EC%A7%81%EC%82%AC%EA%B0%81%ED%98%95%20%EB%B3%84%EC%B0%8D%EA%B8%B0%20-%20JavaScript/": {
    "title": "[프로그래머스] 직사각형 별찍기 - JavaScript",
    "keywords": "algorithm",
    "url": "/Algorithm/2022-05-10-%5B%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%5D%20%EC%A7%81%EC%82%AC%EA%B0%81%ED%98%95%20%EB%B3%84%EC%B0%8D%EA%B8%B0%20-%20JavaScript/",
    "body": "Today I Learned Algorithm Problem with JavaScript 문제 설명 📖 이 문제에는 표준 입력으로 두 개의 정수 n과 m이 주어집니다. 별(*) 문자를 이용해 가로의 길이가 n, 세로의 길이가 m인 직사각형 형태를 출력해보세요. 제한사항 n과 m은 각각 1000 이하인 자연수입니다. 입출력 예 입력 출력 문제 이해 🔑 반복문을 사용하여 행렬을 만드는 문제로 이해했습니다. 행렬을 2차원 배열로 표현할 수 있기 때문에 이중 for문으로 해결할 수 있다고 생각했습니다. 수도 코드 ✍️ 각 행의 값을 담을 변수를 선언한다. 반복문을 통해 행만큼 반복한다. 2차원 반복문을 만들어 각 행에서 열만큼 반복하여 별(*) 문자를 만든다. 2차원 반복문이 끝나면 각 행의 값을 출력한다. 1차원 반복문에서 다음 행으로 넘어오면 이전 행의 값을 담았던 변수를 빈 문자열로 초기화하고 행이 끝날 때 까지 2 ~ 4 과정을 반복하고 종료한다. ** 내가 작성한 코드 작성 ⌨️** process.stdin.setEncoding('utf8'); process.stdin.on('data', data =&gt; { const n = data.split(\" \"); const a = Number(n[0]), b = Number(n[1]); let result = \"\" for (let i = 0; i &lt; b; i++) { result = \"\" for (let j = 0; j &lt; a; j++) { result = result + \"*\" } console.log(result) } }); ** 다른 사람이 작성한 코드 작성 ⌨️** process.stdin.setEncoding('utf8'); process.stdin.on('data', data =&gt; { const n = data.split(\" \"); const a = Number(n[0]), b = Number(n[1]); console.log((('*').repeat(a)+`\\n`).repeat(b)) }); 정리 😄 행렬을 만드는 문제이기에 2차원 배열을 만들기 위해 이중 for문을 생각했습니다. 그러나 다른 사람이 작성한 코드를 보면서 해당 문제는 행렬의 각 요소에 특정 값을 입력하지 않고 별(*) 문자만을 입력하는 문제이기 때문에 이중 for문을 사용하여 시간 복잡도를 O(n²)으로 만들 필요가 없다는 것을 깨달았습니다. 이번 문제 풀이를 보고 인자로 반복할 값을 넣어주면 문자열을 반복한 값을 리턴해 주는 repeat 메서드를 알게 되었습니다. 해당 메서드로 체이닝을 하면 더욱 직관적이고 간결한 코드를 작성할 수 있으며 시간 복잡도 또한 O(n)으로 줄일 수 있음을 알게 되었습니다."
  },"/TIL/2022-03-24-Vue%20plugin/": {
    "title": "Vue plugin",
    "keywords": "Vue.js",
    "url": "/TIL/2022-03-24-Vue%20plugin/",
    "body": "Today I Learned vue 프로젝트 구조에 대해, 그 중에서도 plugin 사용에 대한 주제로 얘기를 나눠보려고 합니다. 작업을 하면서 이곳 저곳에서 app을 인자로 받으며 app.config.globalPropertie 에 접근하는 경우가 많았습니다. plugins에 대해 이야기 하려면 app에 대해 얘기를 해야 합니다. app와 관련지어 plugins을 얘기하되, 프로젝트 구조를 이해하는데 도움이 되는 만큼만 간단히 짚고 넘어가겠습니다. 목차 app은 무엇인가 app은 어디서 만들어졌는가 app은 어디서 쓰이는가 app은 왜 쓰이는가 그래서 Plugin을 어떻게 사용하는가 1. app은 무엇인가? app의 출발점: main.js 먼저 main.js는 프로젝트를 실행할 때 가장 먼저 실행되는 javascript 파일입니다. 해당 파일은 Vue 인스턴스를 생성하는 역할을 합니다. 모든 Vue 어플리케이션은(Vue3) createApp 함수를 사용하여 새로운 어플리케이션 인스턴스를 생성하여 시작합니다 5번 라인에서 해당 작업이 이루어집니다. 이는 기존의 뷰 인스턴스 생성하는 것과 같습니다. // Vue2에서의 Vue instance 생성법 import Vue from 'vue'; import App from './App.vue'; new Vue({ render: h =&gt; h(App), }).$mount('#app'); console.log에서 app의 모습 여기서는 config.globalProperties를 주목해서 봐주시기를 바랍니다. 2. app은 어디서 만들어졌는가? 앞서 말씀드린 것처럼 main.js에서 만들어지며 이는 는 프로젝트를 실행할 때 가장 먼저 실행되는 javascript 파일입니다. 해당 파일은 Vue 인스턴스를 생성하는 역할을 합니다. 3. 어디서 쓰이는가? /apis, /plugins, /store등 화면 단을 구성하는 .vue 파일 외 대부분 .js파일에서 app을 인자로 받아 사용합니다. 그렇다면 어떤 이유로 사용되며 app은 어디서 만들어지고 어디서 매개변수로 넣는 것인지 살펴보겠습니다. 4. app은 왜 쓰이는가? 이번에는 플러그인에 중점을 두고 설명하겠습니다. /apis에서는 app.config.globalProperties 을 통해 그 안에 넣어둔 플러그인을 사용하게 됩니다. app.config.globalProperties 은 무엇이고 어떤 근거로 사용이 되느냐 하면 Vue 공식 홈페이지를 참고할 수 있습니다. Vue에서 플러그인을 사용할 때 엄격한 정의된 범위는 없지만 보통 5가지의 방식이 있다고 합니다. 일반적으로 플러그인이 유용한 시나리오는 다음과 같습니다. 약간의 전역 메소드 또는 속성 추가, 예. vue-custom-element (opens new window). 하나 이상의 글로벌 에셋 추가 : 디렉티브 / 필터 / 트랜지션 등. (예. vue-touch (opens new window)). 글로벌 mixin으로 일부 컴포넌트 옵션 추가(예. vue-router (opens new window)). 일부 전역 인스턴스 메서드를 config.globalProperties에 연결하여 추가. 가지고 있는 API를 제공하면서 동시에 위의 일부 조합을 주입하는 라이브러리 (예. vue-router (opens new window)). 출처: Vue 공식 홈페이지 5. 그래서 Plugin을 어떻게 사용하는가? 플러그인은 일반적으로 Vue에 전역 수준의 기능을 추가하는 self-contained 코드입니다. 객체 또는함수를 install()메소드를 통해 제공합니다. 플러그인으로 사용하려면 app.config.globalProperties에 $api, $auth 같은 플러그인 객체 또는 메서드를 를 넣어야 합니다. 사용하고 싶은 함수를 넣어서 사용하면 됩니다. app.config.globalProperties에 plugin을 넣기 위해서는 각 플러그인 .js 파일에서 아래의 템플릿을 사용하시면 app.config.globalProperties.$pluginName으로 접근하여 글로벌로 사용할 수 있습니다. const pluginName = { install (app) { app.config.globalProperties.$pluginName = ... } } 플러그인 작성하기에 대한 설명도 플러그인-작성하기 를 참고하시면 좋습니다. 마무리 vue의 프로젝트 구조에서 /plugins/tool.js가 어떻게 만들어졌으며, 어떠한 이유로 사용할 수 있는지, 그리고 tool에 메서드를 직접 만들어 가져다 쓸 수 있는 방법을 떠올릴 수 있기를 바라며 위와 같은 주제로 얘기를 나눴습니다. 감사합니다."
  }}
